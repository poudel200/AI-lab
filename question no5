{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPKqNHlcnSLfJQ2VYq399l0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/poudel200/AI-lab/blob/main/question%20no5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "89fYQQ-oUDOu",
        "outputId": "4235a86c-19b2-401c-f089-1fd7cf3c748a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Heuristic value of the current state: 0\n",
            "Goal state found!\n",
            "Trace of the path:\n",
            "Step 0:\n",
            "  A -> B\n",
            "  B -> Table\n",
            "  C -> A\n",
            "\n",
            "Step 1:\n",
            "  A -> B\n",
            "  B -> Table\n",
            "  C -> Table\n",
            "\n",
            "Step 2:\n",
            "  A -> B\n",
            "  B -> Table\n",
            "  C -> B\n",
            "\n"
          ]
        }
      ],
      "source": [
        "def calculate_heuristic(state, goal):\n",
        "    \"\"\"\n",
        "    Calculate the heuristic value of the given state for the Blocks World Problem.\n",
        "\n",
        "    Parameters:\n",
        "    state (dict): A dictionary where keys are blocks and values are the block they are on top of.\n",
        "                  For example, {'A': 'B', 'B': 'Table', 'C': 'A'} means A is on B, B is on the table, and C is on A.\n",
        "    goal (dict): A dictionary representing the goal configuration, similar to `state`.\n",
        "\n",
        "    Returns:\n",
        "    int: The heuristic value of the given state.\n",
        "    \"\"\"\n",
        "    heuristic = 0\n",
        "\n",
        "    for block, support in state.items():\n",
        "        if block in goal and goal[block] == support:  # Correct support structure\n",
        "            # Increment heuristic value for every block in the correct support structure\n",
        "            current = block\n",
        "            while current in state:\n",
        "                heuristic += 1\n",
        "                current = state[current]\n",
        "        else:  # Wrong support structure\n",
        "            # Decrement heuristic value for every block in the wrong support structure\n",
        "            current = block\n",
        "            while current in state:\n",
        "                heuristic -= 1\n",
        "                current = state[current]\n",
        "\n",
        "    return heuristic\n",
        "\n",
        "def generate_successors(state):\n",
        "    \"\"\"\n",
        "    Generate all possible successor states by moving one block at a time.\n",
        "\n",
        "    Parameters:\n",
        "    state (dict): Current state represented as a dictionary.\n",
        "\n",
        "    Returns:\n",
        "    list: A list of successor states.\n",
        "    \"\"\"\n",
        "    successors = []\n",
        "    blocks = list(state.keys())\n",
        "    supports = list(state.values()) + ['Table']  # Blocks can be placed on other blocks or the table\n",
        "\n",
        "    for block in blocks:\n",
        "        for support in supports:\n",
        "            if state[block] != support and block != support:  # Ensure a valid move\n",
        "                new_state = state.copy()\n",
        "                new_state[block] = support\n",
        "                successors.append(new_state)\n",
        "\n",
        "    return successors\n",
        "\n",
        "def dfs(initial_state, goal_state):\n",
        "    \"\"\"\n",
        "    Perform Depth-First Search (DFS) to find a path from initial state to goal state.\n",
        "\n",
        "    Parameters:\n",
        "    initial_state (dict): The starting state.\n",
        "    goal_state (dict): The goal state.\n",
        "\n",
        "    Returns:\n",
        "    tuple: A tuple containing the path (list of states) and a boolean indicating if the goal was found.\n",
        "    \"\"\"\n",
        "    stack = [(initial_state, [initial_state])]  # Stack holds tuples of (current_state, path_to_state)\n",
        "    visited = set()\n",
        "\n",
        "    while stack:\n",
        "        current_state, path = stack.pop()\n",
        "        state_tuple = tuple(current_state.items())\n",
        "\n",
        "        if state_tuple in visited:\n",
        "            continue\n",
        "\n",
        "        visited.add(state_tuple)\n",
        "\n",
        "        if current_state == goal_state:\n",
        "            return path, True\n",
        "\n",
        "        for successor in generate_successors(current_state):\n",
        "            stack.append((successor, path + [successor]))\n",
        "\n",
        "    return [], False  # Goal not found\n",
        "\n",
        "def trace_path(path):\n",
        "    \"\"\"\n",
        "    Print the sequence of states leading to the goal.\n",
        "\n",
        "    Parameters:\n",
        "    path (list): List of states from the initial state to the goal state.\n",
        "    \"\"\"\n",
        "    print(\"Trace of the path:\")\n",
        "    for i, state in enumerate(path):\n",
        "        print(f\"Step {i}:\")\n",
        "        for block, support in state.items():\n",
        "            print(f\"  {block} -> {support}\")\n",
        "        print()\n",
        "\n",
        "# Example usage\n",
        "current_state = {\n",
        "    'A': 'B',\n",
        "    'B': 'Table',\n",
        "    'C': 'A'\n",
        "}\n",
        "\n",
        "goal_state = {\n",
        "    'A': 'B',\n",
        "    'B': 'Table',\n",
        "    'C': 'B'\n",
        "}\n",
        "\n",
        "# Heuristic value\n",
        "heuristic_value = calculate_heuristic(current_state, goal_state)\n",
        "print(f\"Heuristic value of the current state: {heuristic_value}\")\n",
        "\n",
        "# DFS search\n",
        "path, found = dfs(current_state, goal_state)\n",
        "if found:\n",
        "    print(\"Goal state found!\")\n",
        "    trace_path(path)\n",
        "else:\n",
        "    print(\"Goal state not found.\")"
      ]
    }
  ]
}